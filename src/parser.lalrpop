use ast::{Expr, ConstDecl, WireDecl, WireWidth, WireValue,
          BinOpCode, UnOpCode, MuxOption, Assignment, RegisterBankDecl, RegisterDecl, Statement, SpannedExpr};
use errors::Error;
use lexer::{Span, Tok};
use lalrpop_util::{ErrorRecovery, ParseError};

// ErrorRecovery< locationType, tokenType, errorType >
grammar<'err, 'input>(errors: &'err mut Vec<ErrorRecovery<usize, Tok<'input>, Error>>);

extern {
    type Location = usize;
    type Error = Error;

    enum Tok<'input> {
        "&&" => Tok::AndAnd, "||" => Tok::OrOr,

        "==" => Tok::Equal, "!=" => Tok::NotEqual,
        ">=" => Tok::GreaterEqual, ">" => Tok::Greater,
        "<=" => Tok::LessEqual, "<" => Tok::Less,

        "=" => Tok::Assign,
        ">>" => Tok::RightShift, "<<" => Tok::LeftShift,
        "," => Tok::Comma, ";" => Tok::Semicolon,

        "+" => Tok::Plus, "-" => Tok::Minus, "&" => Tok::And, "|" => Tok::Or,
        "^" => Tok::Xor, "*" => Tok::Times, "/" => Tok::Divide, "!" => Tok::Not,

        CONSTANT => Tok::Constant(<WireValue>),

        "(" => Tok::OpenParen, ")" => Tok::CloseParen,
        "{" => Tok::OpenBrace, "}" => Tok::CloseBrace,
        "[" => Tok::OpenBracket, "]" => Tok::CloseBracket,

        ":" => Tok::Colon,
        "~" => Tok::Complement,
        ".." => Tok::DotDot,

        "wire" => Tok::Wire,
        "const" => Tok::Const,
        "register" => Tok::Register,
        "in" => Tok::In,

        ID => Tok::Identifier(<&'input str>),
    }
}

pub Statements : Vec<Statement> = {
    <v:StatementsNotEof> <e:StatementNeedSemi?> => {
        match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        }
    }
};

Repeat<delim, T>: Vec<T> = {
    <v:(<T> delim)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Repeat1<delim, T>: Vec<T> = {
    <v:(<T> delim)*> <e:T> delim? => {
        let mut v = v;
        v.push(e);
        v
    }
};

Commas<T>: Vec<T> = Repeat<",", T>;
Commas1<T>: Vec<T> = Repeat1<",", T>;

Semicolons<T>: Vec<T> = Repeat<";", T>;
Semicolons1<T>: Vec<T> = Repeat1<";", T>;

WidthConstant : WireWidth = {
    <start:@R> <constant:CONSTANT> <end:@L> =>? {
        if constant.bits <= 128 {
            Ok(WireWidth::Bits(constant.bits as u8))
        } else {
            Err(ParseError::User { error: Error::InvalidWireWidth((start, end)) })
        }
    },
    // XXX workaround for error recovery issue
    <error:!> => {
        errors.push(error);
        WireWidth::Bits(0)
    }
};

SimpleConstant : u8 = {
    <start:@R> <constant:CONSTANT> <end:@L> =>? {
        if constant.bits <= 128 {
            Ok(constant.bits as u8)
        } else {
            Err(ParseError::User { error: Error::InvalidConstant((start, end)) })
        }
    },
    // XXX workaround for error recovery issue
    <error:!> => {
        errors.push(error);
        0
    }
};


WireDecl : WireDecl = {
    <start:@R> <name:IDWithSpan> ":" <width:WidthConstant> <end:@L>  =>
        WireDecl { name: String::from(name.0), width: width, span: (start, end), },
    <start:@R> <name:IDWithSpan> <end:@L>  => {
        errors.push(ErrorRecovery {
            error: ParseError::User { error: Error::MissingWireWidth((start, end)) },
            dropped_tokens: vec!(),
        });
        WireDecl { name: String::from(name.0), width: WireWidth::Bits(0), span: (start, end) }
    },
    <start:@R> <name:IDWithSpan> "=" <end:@L> <e:Expr> => {
        errors.push(ErrorRecovery {
            error: ParseError::User { error: Error::MissingWireWidth((start, end)) },
            dropped_tokens: vec!(),
        });
        errors.push(ErrorRecovery {
            error: ParseError::User { error: Error::WireAssignedInDeclaration((start, end)) },
            dropped_tokens: vec!(),
        });
        WireDecl { name: String::from(name.0), width: WireWidth::Bits(0), span: (start, end) }
    },
    <start:@R> <name:IDWithSpan> ":" <width:WidthConstant> "=" <end:@L> <e:Expr> => {
        errors.push(ErrorRecovery {
            error: ParseError::User { error: Error::WireAssignedInDeclaration((start, end)) },
            dropped_tokens: vec!(),
        });
        WireDecl { name: String::from(name.0), width: width, span: (start, end) }
    }
};

// public for testing
pub WireDecls : Vec<WireDecl> = {
    "wire" <c:Commas<WireDecl>> => c
};

ConstDecl : ConstDecl = {
    <name:IDWithSpan> "=" <e:Expr> => ConstDecl { name: String::from(name.0), name_span: name.1, value: e },
    <name:IDWithSpan> <start:@R> ":" <width:WidthConstant> <end:@R> "=" <e:Expr> => {
        errors.push(ErrorRecovery {
            error: ParseError::User { error: Error::AddedConstWidth((start, end)) },
            dropped_tokens: vec!(),
        });
        ConstDecl { name: String::from(name.0), name_span: name.1, value: e }
    },
    <error:!> => {
        errors.push(error);
        ConstDecl { name: String::from("<error>"), value: SpannedExpr::new((0,0), Expr::Error), name_span: (0, 0) }
    },
};

// public for testing
pub ConstDecls : Vec<ConstDecl> = {
    "const" <c:Commas<ConstDecl>> => c
};

BinOpAddSub : BinOpCode = {
    "+" => BinOpCode::Add,
    "-" => BinOpCode::Sub,
};

BinOpAnd : BinOpCode = {
    "&" => BinOpCode::And,
};

BinOpXor : BinOpCode = {
    "^" => BinOpCode::Xor,
};

BinOpOr : BinOpCode = {
    "|" => BinOpCode::Or,
};

BinOpMulDiv : BinOpCode = {
    "*" => BinOpCode::Mul,
    "/" => BinOpCode::Div,
};

BinOpCompare : BinOpCode = {
    "==" => BinOpCode::Equal,
    "!=" => BinOpCode::NotEqual,
    "<=" => BinOpCode::LessEqual,
    ">=" => BinOpCode::GreaterEqual,
    "<" => BinOpCode::Less,
    ">" => BinOpCode::Greater,
};

BinOpLogicalAnd : BinOpCode = {
    "&&" => BinOpCode::LogicalAnd,
};

BinOpLogicalOr : BinOpCode = {
    "||" => BinOpCode::LogicalOr,
};

BinOpShift : BinOpCode = {
    "<<" => BinOpCode::LeftShift,
    ">>" => BinOpCode::RightShift,
};

BinTier<Op,NextTier> : SpannedExpr = {
    <start:@R> <l:BinTier<Op,NextTier>> <o:Op> <r:NextTier> <end:@L> =>
        SpannedExpr::new((start,end), Expr::BinOp(o, l, r)),
    NextTier
};


BinTierNonAssoc<Op,NextTier> : SpannedExpr = {
    <start:@R> <l:NextTier> <o:Op> <r:NextTier> <end:@L> =>
        SpannedExpr::new((start,end), Expr::BinOp(o, l, r)),
    NextTier
};

ExprLogicalOr = BinTier<BinOpLogicalOr, ExprLogicalAnd>;
ExprLogicalAnd = BinTier<BinOpLogicalAnd, ExprCompare>;
ExprCompare = BinTierNonAssoc<BinOpCompare, ExprIn>;
ExprIn: SpannedExpr = {
    <start:@R> <e:ExprOr> "in" "{" <l:Commas<Expr>> "}" <end:@L> => {
        let v = l.into_iter().collect();
        SpannedExpr::new((start, end), Expr::InSet(e, v))
    },
    // XXX workaround for error recovery issue
    <start:@R> <e:ExprOr> "in" <error:!> <end:@L> => {
        errors.push(error);
        SpannedExpr::new((start, end), Expr::InSet(e, vec!()))
    },
    ExprOr
};
ExprOr = BinTier<BinOpOr, ExprXor>;
ExprXor = BinTier<BinOpXor, ExprAnd>;
ExprAnd = BinTier<BinOpAnd, ExprShift>;
ExprShift = BinTier<BinOpShift, ExprAddSub>;
ExprAddSub = BinTier<BinOpAddSub, ExprMulDiv>;
ExprMulDiv = BinTier<BinOpMulDiv, Term>;

UnOp : UnOpCode = {
    "+" => UnOpCode::Plus,
    "-" => UnOpCode::Negate,
    "~" => UnOpCode::Complement,
    "!" => UnOpCode::Not,
};

MuxOption : MuxOption = {
    <l:Expr> ":" <r:Expr> => MuxOption { condition: l, value: r },
};

MuxOptions = Semicolons<MuxOption>;

SimpleTerm : SpannedExpr = {
    <start:@R> <c:CONSTANT> <end:@L> => SpannedExpr::new((start,end), Expr::Constant(c)),
    "(" <e:Expr> ")" => e,
    <start:@R> "[" <e:MuxOptions> "]" <end:@L> => SpannedExpr::new((start,end), Expr::Mux(e)),
    <i:IDWithSpan> => SpannedExpr::new(i.1, Expr::NamedWire(String::from(i.0))),
    <start:@R> "(" <l:Expr> ".." <r:Expr> ")" <end:@L> => SpannedExpr::new((start,end), Expr::Concat(l, r)),
};

Term : SpannedExpr = {
    <start:@R> <u:UnOp> <t:SimpleTerm> <end:@L> => SpannedExpr::new((start,end), Expr::UnOp(u, t)),
    <start:@R> <e:SimpleTerm> "[" <low:SimpleConstant> ".." <high:SimpleConstant> "]" <end:@L> => {
        SpannedExpr::new((start,end), Expr::BitSelect { from: e, low: low, high: high })
    },
    <start:@R> <e:SimpleTerm> "[" <low:SimpleConstant> <error:!> => {
        errors.push(error);
        e
    },
    // XXX workaround for error recovery issue
    <start:@R> <e:SimpleTerm> "[" <low:SimpleConstant> ".." <high:SimpleConstant> <error:!> => {
        errors.push(error);
        e
    },
    <e:SimpleTerm> => e,
};

// public for testing
pub Expr: SpannedExpr = {
    <e:Expr> <error:!> => {
        errors.push(error);
        e
    },
    ExprLogicalOr,
};

IDWithSpan : (&'input str, Span) = {
    <start:@R> <n:ID> <end:@L> => {
        (n, (start,end))
    },
    <start:@R> <error:!> <end:@L> => {
        errors.push(error);
        ("<error>", (start, end))
    },
};

Assignment : Assignment = {
    <start:@R> <n:(<IDWithSpan> "=")+> <v:Expr> <end:@L> => {
        let mut names: Vec<(String, Span)> = Vec::new();
        for name in n {
            names.push((String::from(name.0), name.1));
        }
        Assignment { span: (start,end), names: names, value: v }
    },
    <full_start:@R> <name:IDWithSpan> <start_bracket:@R> "[" <end_bracket:@L> <e:Semicolons1<MuxOption>> "]" <full_end:@L> => {
        errors.push(ErrorRecovery {
            error: ParseError::User { error: Error::MissingAssignmentMux((full_start,start_bracket)) },
            dropped_tokens: vec!(),
        });
        Assignment {
            span: (full_start, full_end),
            names: vec!((String::from(name.0), name.1)),
            value: SpannedExpr::new((start_bracket, full_end), Expr::Mux(e)),
        }
    }
};

RegisterDecl : RegisterDecl = {
    <start:@R> <n:IDWithSpan> "=" <e:Expr> <end:@L> => {
        errors.push(ErrorRecovery {
            error: ParseError::User { error: Error::MissingRegisterWidth((start, end)) },
            dropped_tokens: vec!(),
        });
        RegisterDecl { name: String::from("<error>"), width: WireWidth::from(0),
		       default: SpannedExpr::new((start,end), Expr::Error),
                       span: (start,end), }
    },
    <start:@R> <n:IDWithSpan> ":" <w:WidthConstant> "=" <e:Expr> <end:@L> => {
        RegisterDecl { name: String::from(n.0), width: w, default: e,
                       span: (start,end), }
    },
    <start:@R> <n:IDWithSpan> <e:!> <end:@L> => {
        errors.push(e);
        RegisterDecl { name: String::from("<error>"), width: WireWidth::from(0),
		       default: SpannedExpr::new((start,end), Expr::Error),
                       span: (start,end), }
    },
    <start:@R> "wire" <end_wire:@L> <n:IDWithSpan> (":" <WidthConstant>)? "=" <e:Expr> <end:@L> => {
        errors.push(ErrorRecovery {
            error: ParseError::User { error: Error::RegisterDeclaredWithWire((start, end_wire)) },
            dropped_tokens: vec!(),
        });
        RegisterDecl { name: String::from("<error>"), width: WireWidth::from(0),
		       default: SpannedExpr::new((start,end), Expr::Error),
                       span: (start,end), }
    },
};

RegisterBankDecl : RegisterBankDecl = {
    <start:@R> "register" <i:IDWithSpan> "{" <r:Semicolons<RegisterDecl>> "}" <end:@L> => {
        RegisterBankDecl {
            name: String::from(i.0),
            name_span: i.1,
            registers: r,
            span: (start,end),
        }
    },
    <start:@R> "register" <i:IDWithSpan> <error:!> <end:@L> => {
        errors.push(error);
        RegisterBankDecl {
            name: String::from(i.0),
            name_span: i.1,
            registers: vec!(),
            span: (start,end),
        }
    },
};

Assignments : Vec<Assignment> = Commas1<Assignment>;

StatementNeedSemi : Statement = {
    Assignments => Statement::Assignments(<>),
    WireDecls => Statement::WireDecls(<>),
    ConstDecls => Statement::ConstDecls(<>),
    <e:SimpleTerm> => {
        if errors.len() == 0 {
            /* Assume we'd give a duplicate error if there are already other pending errors */
            errors.push(ErrorRecovery {
                error: ParseError::User { error: Error::ExpectedStatementFoundExpr(e) },
                dropped_tokens: vec!(),
            })
        }
        Statement::Error
    }
};

StatementNoSemi : Statement = {
    RegisterBankDecl => Statement::RegisterBankDecl(<>),
};

Statement : Statement = {
    <s:StatementNeedSemi> => s,
    <s:StatementNoSemi> => s,
};

StatementSemicolon : Statement = {
    <s:StatementNeedSemi> ";" => s,
    <s:StatementNoSemi> => s,
};

// Require semicolons between assignments and wire and const declarations, but not
// after register bank declaration
StatementsNotEof : Vec<Statement> = {
    <e:StatementNeedSemi> ";" => {
        let mut v = Vec::new();
        v.push(e);
        v
    },
    <e:StatementNoSemi> => {
        let mut v = Vec::new();
        v.push(e);
        v
    },
    <v:StatementsNotEof> ";" => v,
    <v:StatementsNotEof> <e:StatementNeedSemi> ";" => {
        let mut v = v;
        v.push(e);
        v
    },
    <v:StatementsNotEof> <e:StatementNoSemi> => {
        let mut v = v;
        v.push(e);
        v
    },
};
